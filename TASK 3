#include <iostream>
#include <vector>
#include <string>

using namespace std;

struct Task {
    string description;
    bool completed;

    Task(const string& desc) : description(desc), completed(false) {}
};

// Function to display the to-do list
void displayTasks(const vector<Task>& tasks) {
    cout << "To-Do List:" << endl;
    for (int i = 0; i < tasks.size(); ++i) {
        cout << i + 1 << ". ";
        if (tasks[i].completed) {
            cout << "[Completed] ";
        }
        cout << tasks[i].description << endl;
    }
    cout << endl;
}

// Function to add a task to the list
void addTask(vector<Task>& tasks, const string& description) {
    Task newTask(description);
    tasks.push_back(newTask);
    cout << "Task added successfully!" << endl;
}

// Function to mark a task as completed
void markTaskAsCompleted(vector<Task>& tasks, int taskNumber) {
    if (taskNumber >= 1 && taskNumber <= tasks.size()) {
        tasks[taskNumber - 1].completed = true;
        cout << "Task marked as completed!" << endl;
    } else {
        cout << "Invalid task number. Please try again." << endl;
    }
}

// Function to remove a task from the list
void removeTask(vector<Task>& tasks, int taskNumber) {
    if (taskNumber >= 1 && taskNumber <= tasks.size()) {
        tasks.erase(tasks.begin() + taskNumber - 1);
        cout << "Task removed successfully!" << endl;
    } else {
        cout << "Invalid task number. Please try again." << endl;
    }
}

int main() {
    vector<Task> tasks; // Vector to store tasks

    cout << "Welcome to the To-Do List Manager!" << endl;

    while (true) {
        cout << "Menu:" << endl;
        cout << "1. Add Task" << endl;
        cout << "2. View Tasks" << endl;
        cout << "3. Mark Task as Completed" << endl;
        cout << "4. Remove Task" << endl;
        cout << "5. Quit" << endl;
        cout << "Enter your choice: ";

        int choice;
        cin >> choice;

        switch (choice) {
            case 1: {
                string taskDescription;
                cout << "Enter the task description: ";
                cin.ignore(); // Clear the newline character from the previous input
                getline(cin, taskDescription);
                addTask(tasks, taskDescription);
                break;
            }
            case 2: {
                if (tasks.empty()) {
                    cout << "No tasks to display." << endl;
                } else {
                    displayTasks(tasks);
                }
                break;
            }
            case 3: {
                if (tasks.empty()) {
                    cout << "No tasks to mark as completed." << endl;
                } else {
                    displayTasks(tasks);
                    cout << "Enter the task number to mark as completed: ";
                    int taskNumber;
                    cin >> taskNumber;
                    markTaskAsCompleted(tasks, taskNumber);
                }
                break;
            }
            case 4: {
                if (tasks.empty()) {
                    cout << "No tasks to remove." << endl;
                } else {
                    displayTasks(tasks);
                    cout << "Enter the task number to remove: ";
                    int taskNumber;
                    cin >> taskNumber;
                    removeTask(tasks, taskNumber);
                }
                break;
            }
            case 5:
                cout << "Thanks for using the To-Do List Manager!" << endl;
                return 0;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }

    return 0;
}
